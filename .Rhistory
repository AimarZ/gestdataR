data = "list",
dtypes = "character",
shape = "numeric",
allowed_types = "character"
),
prototype(
data = list(),
shape = c(0,0),
allowed_types = c("integer", "numeric", "logical", "character")
)
)
#' Constructor avanzado de la clase Dataset
#'
#' @description Esta función crea un objeto de clase \code{\linkS4class{Dataset}} a partir de una tabla de datos (matriz o data.frame)
#'
#' @param x Tabla de datos (matriz o data frame)
#' @return Un objeto de clase \code{\linkS4class{Dataset}} que representa la tabla de datos pasada como argumento
dataset_from_table <- function(x) {
object <- new("Dataset")
names = colnames(x)
if (is.matrix(x)) {
x = as.data.frame(x)
}
object <- add_cols(object,as.list(x),names=names)
return(object)
}
# to_dataframe -----------------------------------------------------------------
setGeneric(name="to_dataframe",
def=function(object)
{
standardGeneric("to_dataframe")
}
)
#' Dataset a data.frame
#'
#' @description Método para convertir un Dataset a un data.frame
#' @param object El Dataset que se quiere convertir
#' @return Un data.frame con los mismos datos que el Dataset de entrada
#'
#' @examples
#' dataset = new("Dataset")
#' dataset = add_col(dataset,c(1,2,3))
#' dataset = add_col(dataset,c("Jon","Bill","James"))
#' dataset = add_col(dataset,c(7,8,9))
#' df = to_dataframe(dataset)
#' df
#'
setMethod(f="to_dataframe",
signature(object = "Dataset"),
definition=function(object) {
nombres = names(object@data)
df = data.frame(row.names = 1:object@shape[1])
for(i in seq_along(object@data)){
df[nombres[i]] = object@data[[i]]
}
return(df)
})
# Print ----------------------------------------------------------------
# Función para imprimir un objeto de clase Dataset vía print()
# print.Dataset = function(dataset) {
#   cat(paste("Dataset of shape: ", "[",dataset@shape[1], ",",dataset@shape[2], "]",sep=""),"\n")
#   cat("Data by columns:","\n")
#   colnames = names(dataset@data)
#   for (i in 1:length(dataset@data)) {
#     cat(paste(colnames[i], " = [", paste(dataset@data[[i]],collapse=" ",sep=" "), "] , dtype = ", dataset@dtypes[i], "\n",sep=""))
#   }
# }
# setGeneric(name="show",
#            def=function(object)
#            {
#              standardGeneric("show")
#            }
# )
setMethod(f = "show",
signature = "Dataset",
definition = function(object){
cat(paste("Dataset of shape: ", "[",dataset@shape[1], ",",dataset@shape[2], "]",sep=""),"\n")
cat("Data by columns:","\n")
colnames = names(dataset@data)
for (i in 1:length(dataset@data)) {
cat(paste(colnames[i], " = [", paste(dataset@data[[i]],collapse=" ",sep=" "), "] , dtype = ", dataset@dtypes[i], "\n",sep=""))
}
})
# add_col -----------------------------------------------------------------
setGeneric(name="add_col",
def=function(object,data,name=NULL)
{
standardGeneric("add_col")
}
)
#' Añadir una columna
#'
#' @description Método para añadir una columna al Dataset
#' @param object El Dataset que se quiere modificar
#' @param data Vector de valores de la columna a añadir. Todos los valores tienen que ser del mismo tipo.
#' @param name Nombre de la columna, opcional
#' @return Un nuevo objeto de clase Dataset con la columna añadida
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' df = add_col(df,c(7,8,9))
#' df
#'
setMethod(f="add_col",
signature(object = "Dataset"),
definition=function(object, data, name = NULL) {
if (!class(data) %in% object@allowed_types) {
stop("Sólo se admiten valores de tipo:", paste(object@allowed_types, collapse = ","))
}
if (length(data) < 1) {
stop("data es una lista vacía. No hay nada para añadir")
}
if (object@shape[1] != 0 && object@shape[1] != length(data)) {
stop(paste("La columna tiene que tener", object@shape[1], "valores"))
}
index = object@shape[2] + 1
# Si no se especifica nombre, se le asigna uno por defecto
if (is.null(name)) {
name = paste("V", index, sep = "")
}
object@data[[name]] = data
object@shape[2] = object@shape[2] + 1
object@shape[1] = length(data)
object@dtypes = c(object@dtypes, class(data))
return(object)
})
# add_cols ----------------------------------------------------------------
setGeneric(
"add_cols",
function(object, data, names = NULL) {
standardGeneric("add_cols")
}
)
#' Añadir varias columnas
#'
#' @description Método para añadir varias columnas al Dataset
#' @param object El Dataset que se quiere modificar
#' @param data Lista de vectores que contienen los valores de las columnas a añadir
#' @param names Vector de nombres de las columnas, opcional
#' @return Un nuevo objeto de clase Dataset con la columnas añadida
#'
#' @examples
#' df = new("Dataset")
#' df = add_cols(df,list(c(1,2,3),c("Jon","Bill","James"),c(7,8,9))
#' print(df)
#'
setMethod(
"add_cols",
signature(object = "Dataset", data = "list"),
function(object, data, names = NULL) {
if (length(data) < 1) {
stop("data es una lista vacía. No hay nada para añadir")
}
names = names(data)
for (i in seq_along(data)) {
if (is.null(names)){
name = NULL
} else {
name = names[i]
}
object = add_col(object,data[[i]], name)
}
return(object)
}
)
# add_row -----------------------------------------------------------------
setGeneric(
"add_row",
function(object, data) {
standardGeneric("add_row")
}
)
#' Añadir una fila
#'
#' @description Método para añadir una fila al Dataset
#' @param object El Dataset que se quiere modificar
#' @param data Vector de valores de la fila a añadir.
#'
#' @return Un nuevo objeto de clase Dataset con la fila añadida
#'
#' @examples
#' df = new("Dataset")
#' df = add_row(df,c(1,"Bill",5))
#' df = add_row(df,c(2,"Jon",6))
#' print(df)
#'
setMethod(
"add_row",
signature(object = "Dataset", data = "list"),
function(object, data) {
if (length(data) < 1) {
stop("data es una lista vacía. No hay nada para añadir")
}
if (object@shape[2] != 0 && object@shape[2] != length(data)) {
stop(paste("La fila debe tener", object@shape[2], "valores"))
}
for (i in seq_along(data)) {
if (!class(data[[i]]) %in% object@allowed_types) {
stop("Sólo se admiten valores de tipo:", paste(object@allowed_types, collapse = ", "))
}
if (length(data[[i]]) >1){
stop("Esta función solo sirve para añadir una sola fila")
}
if (length(object@dtypes) > 0 && class(data[[i]]) != object@dtypes[i]) {
stop(paste("El valor para la columna", i, "debe ser de tipo", object@dtypes[i]))
}
}
for (i in seq_along(data)) {
# Si no hay columnas, se añade la primera
if (length(object@dtypes) == 0) {
object@data[[i]] = data[[i]]
} else { # Si ya hay columnas, se añade a la última
object@data[[i]] = c(object@data[[i]], data[[i]])
}
}
# Si no hay nombres, se les asigna uno por defecto
if (is.null(names(object@data))) {
new_names = c()
dtypes = c()
for (i in seq_along(data)) {
new_names = c(new_names,paste("V", i, sep = ""))
dtypes = c(dtypes, class(data[[i]]))
}
names(object@data) = new_names
object@dtypes = dtypes
}
object@shape[1] = object@shape[1] + 1
return(object)
}
)
# add_rows ----------------------------------------------------------------
setGeneric(
"add_rows",
function(object, data) {
standardGeneric("add_rows")
}
)
#' Añadir varias filas
#'
#' @description Método para añadir varias filas al Dataset
#' @param object El Dataset que se quiere modificar
#' @param data Lista de listas que contienen los valores de las filas a añadir
#'
#' @return Un nuevo objeto de clase Dataset con las filas añadidas
#'
#' @examples
#' df = new("Dataset")
#' df = add_rows(df,list(c(1,"Bill",5),c(2,"Jon",6)))
#' print(df)
#'
setMethod(
"add_rows",
signature(object = "Dataset", data = "list"),
function(object, data) {
if (length(data) < 1) {
stop("data es una lista vacía. No hay nada para añadir")
}
for (i in seq_along(data)) {
object = add_row(object,data[[i]])
}
return(object)
}
)
# remove_col --------------------------------------------------------------
setGeneric(
"remove_col",
function(object, i) {
standardGeneric("remove_col")
}
)
#' Quitar una columna
#'
#' @description Método para quitar una columna del Dataset
#' @param object El Dataset que se quiere modificar
#' @param i índice o nombre de la columna a quitar
#' @return Un nuevo objeto de clase Dataset con la columna quitada
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3),name="nums")
#' df = add_col(df,c("Jon","Bill","James"),name="names")
#' df = remove_col(df,1)
#' print(df)
#' df = remove_col(df,"names")
#' print(df)
setMethod(
"remove_col",
signature(object = "Dataset"),
function(object, i) {
# Si se pasa un nombre, se convierte a índice
if (is.character(i)){
i = match(i,names(object@data))
}
object@data = object@data[-i]
object@dtypes = object@dtypes[-i]
object@shape[2] = object@shape[2] - 1
return(object)
}
)
# remove_cols -------------------------------------------------------------
setGeneric(
"remove_cols",
function(object, l) {
standardGeneric("remove_cols")
}
)
#' Quitar varias columnas
#'
#' @description Método para quitar varias columnas del Dataset
#' @param object El Dataset que se quiere modificar
#' @param l lista de índices o nombres de las columnas a quitar
#' @return Un nuevo objeto de clase Dataset con las columnas quitadas
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3),name="nums")
#' df = add_col(df,c("Jon","Bill","James"),name="names")
#' df = remove_cols(df,list(1,"names"))
#' print(df)
setMethod(
"remove_cols",
signature(object = "Dataset", l = "list"),
function(object, l) {
# Para que funcione bien, hay que borrar las columnas de mayor a menor
# Por tanto, se ordena la lista de mayor a menor,
# teniendo en cuenta que i puede ser un nombre o un número
sorted_indexes=c(rbind(1:length(object@data), names(object@data)))
l_sorted = l[order(match(l,sorted_indexes),decreasing = TRUE)]
for (i in l) {
object = remove_col(object,i)
}
return(object)
}
)
# remove_row --------------------------------------------------------------
setGeneric(
"remove_row",
function(object, i) {
standardGeneric("remove_row")
}
)
#' Quitar una fila
#'
#' @description Método para quitar una fila del Dataset
#' @param object El Dataset que se quiere modificar
#' @param i índice de la fila a quitar
#' @return Un nuevo objeto de clase Dataset con la fila quitada
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' df = remove_row(df,2)
#' print(df)
#'
setMethod(
"remove_row",
signature(object = "Dataset", i = "numeric"),
function(object, i) {
object@shape[1] = object@shape[1] - 1
for (j in seq_along(object@data)) {
object@data[[j]] = object@data[[j]][-i]
}
return(object)
}
)
# remove_rows -------------------------------------------------------------
setGeneric(
"remove_rows",
function(object, v) {
standardGeneric("remove_rows")
}
)
#' Quitar varias filas
#'
#' @description Método para quitar varias filas del Dataset
#' @param object El Dataset que se quiere modificar
#' @param v vector de índices de las filas a quitar
#' @return Un nuevo objeto de clase Dataset con las filas quitadas
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' df = remove_rows(df,c(2,1))
#' print(df)
#'
setMethod(
"remove_rows",
signature(object = "Dataset", v = "numeric"),
function(object, v) {
# Para que funcione bien, hay que borrar las filas de mayor a menor
v_sorted <- sort(v,decreasing=TRUE)
for (i in v_sorted) {
object = remove_row(object,i)
}
return(object)
}
)
# length ------------------------------------------------------------------
setGeneric(
"get_length",
function(object) {
standardGeneric("get_length")
}
)
#' Tamaño del Dataset
#'
#' @description Método para obtener el tamaño del Dataset
#' @param object El Dataset que se quiere medir
#' @return Un integer que indica el número de columnas del Dataset
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' print(get_length(df))
setMethod(
"get_length",
signature(object = "Dataset"),
function(object) {
return(length(object@data))
}
)
# rename_cols ------------------------------------------------------------------
setGeneric(
"rename_cols",
function(object,new_names) {
standardGeneric("rename_cols")
}
)
#' Renombrar columnas del Dataset
#'
#' @description Método para renombrar las columnas de un Dataset
#'
#' @param object El Dataset que se quiere modificar
#' @param new_names Vector de carácteres que recoge los nuevos nombres
#' @return Un nuevo objeto de clase Dataset con las columnas renombradas
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' df = rename_cols(df,c("Index","Name"))
#' df
setMethod(
"rename_cols",
signature(object = "Dataset",new_names = "character"),
function(object,new_names) {
names(object@data) = new_names
return(object)
}
)
# Indexing ----------------------------------------------------------------
setGeneric(
"getitem",
function(object,i,j=NULL) {
standardGeneric("getitem")
}
)
#' Indexar un Dataset
#'
#' @description Método para indexar un Dataset. El primer índice indica la columna y el segundo la fila.
#' Si no se especifica el segundo índice, se devuelve la columna completa.
#' @param object El Dataset que se quiere indexar
#' @param i índice o nombre de la columna a indexar
#' @param j índice de la fila a indexar, opcional
#' @return Un vector con los valores de la columna o un valor concreto si se especifica el segundo índice
#'
#' @examples
#' df = new("Dataset")
#' df = add_col(df,c(1,2,3))
#' df = add_col(df,c("Jon","Bill","James"))
#' print(getitem(df,"V1"))
#' print(getitem(df,"V1",3))
#' print(getitem(df,1,1))
#'
setMethod(
"getitem",
signature(object = "Dataset"),
function(object, i, j=NULL) {
if (is.null(j)){
return(object@data[[i]])
}
return(object@data[[i]][j])
}
)
# Name <- c("Jon", "Bill", "Maria", "Ben", "Tina")
# Age <- c(23, 41, 32, 58, 26)
# Weight <- c(156,98,75,112,74)
# Height <- c(1.75,1.68,1.56,1.86,1.76)
# x <- data.frame(Name, Age, Weight, Height)
#
# d = dataset_from_table(x)
#library(gestdata)
Name <- c("Jon", "Bill", "Maria", "Ben", "Tina")
Age <- c(23, 41, 32, 58, 26)
Weight <- c(156,98,75,112,74)
Height <- c(1.75,1.68,1.56,1.86,1.76)
x <- data.frame(Name, Age, Weight, Height)
d = dataset_from_table(x)
d = rename_cols(d,c("abc"))
print(d)
d
dataset = new("Dataset")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
library(gestdata)
